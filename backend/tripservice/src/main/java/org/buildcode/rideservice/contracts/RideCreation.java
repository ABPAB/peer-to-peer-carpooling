package org.buildcode.rideservice.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class RideCreation extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50613160806100206000396000f3fe608060405260043610610072576000357c01000000000000000000000000000000000000000000000000000000009004806312ddb75d146100775780632b494412146100b457806349748249146100dd57806355f2281c14610106578063a471a91b1461012f578063b8ced15b14610158575b600080fd5b34801561008357600080fd5b5061009e60048036036100999190810190612156565b610195565b6040516100ab9190612b3e565b60405180910390f35b3480156100c057600080fd5b506100db60048036036100d691908101906121c2565b6103ee565b005b3480156100e957600080fd5b5061010460048036036100ff9190810190612241565b610c1f565b005b34801561011257600080fd5b5061012d600480360361012891908101906122d8565b6111d3565b005b34801561013b57600080fd5b5061015660048036036101519190810190612156565b611528565b005b34801561016457600080fd5b5061017f600480360361017a9190810190612115565b611942565b60405161018c9190612fb3565b60405180910390f35b600080836040516020018082805190602001908083835b6020831015156101d157805182526020820191506020810190506020830392506101ac565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050600080600083815260200190815260200160002060000180546001816001161561010002031660029004905011151561027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027390612e51565b60405180910390fd5b6000806000838152602001908152602001600020600a01846040518082805190602001908083835b6020831015156102c957805182526020820191506020810190506020830392506102a4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805460018160011615610100020316600290049050111515610356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034d90612eb1565b60405180910390fd5b600080828152602001908152602001600020600a01836040518082805190602001908083835b6020831015156103a1578051825260208201915060208101905060208303925061037c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff1691505092915050565b6000836040516020018082805190602001908083835b6020831015156104295780518252602082019150602081019050602083039250610404565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050600080600083815260200190815260200160002090506000816000018054600181600116156101000203166002900490501115156104d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d090612e51565b60405180910390fd5b836040516020018082805190602001908083835b60208310151561051257805182526020820191506020810190506020830392506104ed565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001208160010160405160200180828054600181600116156101000203166002900480156105af5780601f1061058d5761010080835404028352918201916105af565b820191906000526020600020905b81548152906001019060200180831161059b575b50509150506040516020818303038152906040528051906020012014151561060c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060390612e11565b60405180910390fd5b6000600281111561061957fe5b8160090160009054906101000a900460ff16600281111561063657fe5b141515610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90612f51565b60405180910390fd5b60028081111561068457fe5b83600281111561069057fe5b14156108a75760028160090160006101000a81548160ff021916908360028111156106b757fe5b021790555060008090505b81600b01805490508110156108a157606082600b01828154811015156106e457fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107825780601f1061075757610100808354040283529160200191610782565b820191906000526020600020905b81548152906001019060200180831161076557829003601f168201915b505050505090506000600281111561079657fe5b83600a01826040518082805190602001908083835b6020831015156107d057805182526020820191506020810190506020830392506107ab565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff16600281111561081f57fe5b1415610893577f230393529ed15c8f1bc153f2615a94503687283b2516d8b0eaf931e8e0d2d6d981846001018560020160000186600201600101876002016002015488600201600401896002016005018a60020160060160405161088a989796959493929190612cdf565b60405180910390a15b5080806001019150506106c2565b50610ba5565b600160028111156108b457fe5b8360028111156108c057fe5b1415610b695760018160090160006101000a81548160ff021916908360028111156108e757fe5b021790555060008090505b81600b0180549050811015610b6357606082600b018281548110151561091457fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109b25780601f10610987576101008083540402835291602001916109b2565b820191906000526020600020905b81548152906001019060200180831161099557829003601f168201915b50505050509050600060028111156109c657fe5b83600a01826040518082805190602001908083835b602083101515610a0057805182526020820191506020810190506020830392506109db565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff166002811115610a4f57fe5b1415610b5557600183600a01826040518082805190602001908083835b602083101515610a915780518252602082019150602081019050602083039250610a6c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548160ff02191690836002811115610ae257fe5b02179055507f230393529ed15c8f1bc153f2615a94503687283b2516d8b0eaf931e8e0d2d6d981846001018560020160000186600201600101876002016002015488600201600401896002016005018a600201600601604051610b4c989796959493929190612b59565b60405180910390a15b5080806001019150506108f2565b50610ba4565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90612e71565b60405180910390fd5b5b4281600d01819055507ff84eb048d4788cc3304648927fa612a18f240efcd4d3910d0219c512d2bfb9c681600001826001018360090160009054906101000a900460ff16846002016003015485600d015486600b0180549050604051610c1096959493929190612da2565b60405180910390a15050505050565b6000836040516020018082805190602001908083835b602083101515610c5a5780518252602082019150602081019050602083039250610c35565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008060008381526020019081526020016000209050600081600001805460018160011615610100020316600290049050111515610d0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0190612e51565b60405180910390fd5b836040516020018082805190602001908083835b602083101515610d435780518252602082019150602081019050602083039250610d1e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120816001016040516020018082805460018160011615610100020316600290048015610de05780601f10610dbe576101008083540402835291820191610de0565b820191906000526020600020905b815481529060010190602001808311610dcc575b505091505060405160208183030381529060405280519060200120141515610e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3490612f11565b60405180910390fd5b60006002811115610e4a57fe5b8160090160009054906101000a900460ff166002811115610e6757fe5b141515610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea090612e31565b60405180910390fd5b60008160020160030154111515610ef5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eec90612ed1565b60405180910390fd5b600081600a01846040518082805190602001908083835b602083101515610f315780518252602082019150602081019050602083039250610f0c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805460018160011615610100020316600290049050141515610fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb590612ef1565b60405180910390fd5b604080519081016040528084815260200160006002811115610fdc57fe5b81525081600a01846040518082805190602001908083835b6020831015156110195780518252602082019150602081019050602083039250610ff4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190611068929190611f13565b5060208201518160010160006101000a81548160ff0219169083600281111561108d57fe5b021790555090505080600b018390806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906110d4929190611f93565b5050600181600201600301600082825403925050819055504281600d01819055507ff84eb048d4788cc3304648927fa612a18f240efcd4d3910d0219c512d2bfb9c681600001826001018360090160009054906101000a900460ff16846002016003015485600d015486600b018054905060405161115796959493929190612da2565b60405180910390a17f230393529ed15c8f1bc153f2615a94503687283b2516d8b0eaf931e8e0d2d6d98382600101836002016000018460020160010185600201600201548660020160040187600201600501886002016006016040516111c4989796959493929190612c1c565b60405180910390a15050505050565b6000896040516020018082805190602001908083835b60208310151561120e57805182526020820191506020810190506020830392506111e9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008060008381526020019081526020016000206000018054600181600116156101000203166002900490501415156112b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b090612f71565b60405180910390fd5b8960008083815260200190815260200160002060000190805190602001906112e2929190611f93565b5088600080838152602001908152602001600020600101908051906020019061130c929190611f93565b50876000808381526020019081526020016000206002016000019080519060200190611339929190611f93565b50866000808381526020019081526020016000206002016001019080519060200190611366929190611f93565b50856000808381526020019081526020016000206002016002018190555084600080838152602001908152602001600020600201600301819055508360008083815260200190815260200160002060020160040190805190602001906113cd929190611f93565b508260008083815260200190815260200160002060020160050190805190602001906113fa929190611f93565b50816000808381526020019081526020016000206002016006019080519060200190611427929190611f93565b50600080600083815260200190815260200160002060090160006101000a81548160ff0219169083600281111561145a57fe5b021790555042600080838152602001908152602001600020600c018190555042600080838152602001908152602001600020600d01819055507ff111283f5574ae875e98f55a06dfac384f514dad4557ce21462cb87a39a34dee610140604051908101604052808c81526020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020016000600281111561150457fe5b8152506040516115149190612f91565b60405180910390a150505050505050505050565b6000826040516020018082805190602001908083835b602083101515611563578051825260208201915060208101905060208303925061153e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008060008381526020019081526020016000209050600081600001805460018160011615610100020316600290049050111515611613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160a90612e51565b60405180910390fd5b600081600a01846040518082805190602001908083835b60208310151561164f578051825260208201915060208101905060208303925061162a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900490501115156116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390612f31565b60405180910390fd5b600060028111156116e957fe5b81600a01846040518082805190602001908083835b60208310151561172357805182526020820191506020810190506020830392506116fe565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff16600281111561177257fe5b1415156117b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ab90612e91565b60405180910390fd5b600281600a01846040518082805190602001908083835b6020831015156117f057805182526020820191506020810190506020830392506117cb565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548160ff0219169083600281111561184157fe5b0217905550600181600201600301600082825401925050819055504281600d01819055507ff84eb048d4788cc3304648927fa612a18f240efcd4d3910d0219c512d2bfb9c681600001826001018360090160009054906101000a900460ff16846002016003015485600d015486600b01805490506040516118c796959493929190612da2565b60405180910390a17f230393529ed15c8f1bc153f2615a94503687283b2516d8b0eaf931e8e0d2d6d9838260010183600201600001846002016001018560020160020154866002016004018760020160050188600201600601604051611934989796959493929190612cdf565b60405180910390a150505050565b61194a612013565b6000826040516020018082805190602001908083835b6020831015156119855780518252602082019150602081019050602083039250611960565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000806000838152602001908152602001600020600001805460018160011615610100020316600290049050111515611a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2790612e51565b60405180910390fd5b6000806000838152602001908152602001600020905061014060405190810160405280826000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611aeb5780601f10611ac057610100808354040283529160200191611aeb565b820191906000526020600020905b815481529060010190602001808311611ace57829003601f168201915b50505050508152602001826001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b8d5780601f10611b6257610100808354040283529160200191611b8d565b820191906000526020600020905b815481529060010190602001808311611b7057829003601f168201915b50505050508152602001826002016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c325780601f10611c0757610100808354040283529160200191611c32565b820191906000526020600020905b815481529060010190602001808311611c1557829003601f168201915b50505050508152602001826002016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cd75780601f10611cac57610100808354040283529160200191611cd7565b820191906000526020600020905b815481529060010190602001808311611cba57829003601f168201915b505050505081526020018260020160020154815260200182600201600301548152602001826002016004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d965780601f10611d6b57610100808354040283529160200191611d96565b820191906000526020600020905b815481529060010190602001808311611d7957829003601f168201915b50505050508152602001826002016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e3b5780601f10611e1057610100808354040283529160200191611e3b565b820191906000526020600020905b815481529060010190602001808311611e1e57829003601f168201915b50505050508152602001826002016006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ee05780601f10611eb557610100808354040283529160200191611ee0565b820191906000526020600020905b815481529060010190602001808311611ec357829003601f168201915b505050505081526020018260090160009054906101000a900460ff166002811115611f0757fe5b81525092505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f5457805160ff1916838001178555611f82565b82800160010185558215611f82579182015b82811115611f81578251825591602001919060010190611f66565b5b509050611f8f9190612072565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611fd457805160ff1916838001178555612002565b82800160010185558215612002579182015b82811115612001578251825591602001919060010190611fe6565b5b50905061200f9190612072565b5090565b610140604051908101604052806060815260200160608152602001606081526020016060815260200160008152602001600081526020016060815260200160608152602001606081526020016000600281111561206c57fe5b81525090565b61209491905b80821115612090576000816000905550600101612078565b5090565b90565b60006120a3823561308c565b905092915050565b600082601f83011215156120be57600080fd5b81356120d16120cc82613002565b612fd5565b915080825260208301602083018583830111156120ed57600080fd5b6120f88382846130d3565b50505092915050565b600061210d82356130a5565b905092915050565b60006020828403121561212757600080fd5b600082013567ffffffffffffffff81111561214157600080fd5b61214d848285016120ab565b91505092915050565b6000806040838503121561216957600080fd5b600083013567ffffffffffffffff81111561218357600080fd5b61218f858286016120ab565b925050602083013567ffffffffffffffff8111156121ac57600080fd5b6121b8858286016120ab565b9150509250929050565b6000806000606084860312156121d757600080fd5b600084013567ffffffffffffffff8111156121f157600080fd5b6121fd868287016120ab565b935050602084013567ffffffffffffffff81111561221a57600080fd5b612226868287016120ab565b925050604061223786828701612097565b9150509250925092565b60008060006060848603121561225657600080fd5b600084013567ffffffffffffffff81111561227057600080fd5b61227c868287016120ab565b935050602084013567ffffffffffffffff81111561229957600080fd5b6122a5868287016120ab565b925050604084013567ffffffffffffffff8111156122c257600080fd5b6122ce868287016120ab565b9150509250925092565b60008060008060008060008060006101208a8c0312156122f757600080fd5b60008a013567ffffffffffffffff81111561231157600080fd5b61231d8c828d016120ab565b99505060208a013567ffffffffffffffff81111561233a57600080fd5b6123468c828d016120ab565b98505060408a013567ffffffffffffffff81111561236357600080fd5b61236f8c828d016120ab565b97505060608a013567ffffffffffffffff81111561238c57600080fd5b6123988c828d016120ab565b96505060806123a98c828d01612101565b95505060a06123ba8c828d01612101565b94505060c08a013567ffffffffffffffff8111156123d757600080fd5b6123e38c828d016120ab565b93505060e08a013567ffffffffffffffff81111561240057600080fd5b61240c8c828d016120ab565b9250506101008a013567ffffffffffffffff81111561242a57600080fd5b6124368c828d016120ab565b9150509295985092959850929598565b61244f816130af565b82525050565b61245e816130c1565b82525050565b600061246f8261304b565b8084526124838160208601602086016130e2565b61248c81613115565b602085010191505092915050565b60006124a582613040565b8084526124b98160208601602086016130e2565b6124c281613115565b602085010191505092915050565b6000815460018116600081146124ed576001811461250d5761254e565b607f600283041680865260ff19831660208701526040860193505061254e565b600282048086526020860195506125238561302e565b60005b8281101561254557815481890152600182019150602081019050612526565b80880195505050505b505092915050565b6000603782527f556e617574686f72697a65643a204f6e6c79207468652072696465206f776e6560208301527f722063616e2075706461746520746865207374617475730000000000000000006040830152606082019050919050565b6000602b82527f52696465206973206e6f742041435449564520616e642063616e6e6f7420616360208301527f63657074207269646572730000000000000000000000000000000000000000006040830152606082019050919050565b6000601382527f5269646520646f6573206e6f74206578697374000000000000000000000000006020830152604082019050919050565b6000601282527f496e76616c6964205269646553746174757300000000000000000000000000006020830152604082019050919050565b6000601f82527f5269646572206973206e6f7420696e20616e20414354495645207374617465006020830152604082019050919050565b6000601482527f526964657220646f6573206e6f742065786973740000000000000000000000006020830152604082019050919050565b6000600982527f636f6d706c6574656400000000000000000000000000000000000000000000006020830152604082019050919050565b6000601282527f4e6f20617661696c61626c6520736561747300000000000000000000000000006020830152604082019050919050565b6000602182527f526964657220697320616c72656164792070617274206f66207468652072696460208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000603482527f556e617574686f72697a65643a204f6e6c79207468652072696465206f776e6560208301527f722063616e2061636365707420612072696465720000000000000000000000006040830152606082019050919050565b6000600682527f61637469766500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f63616e63656c6c656400000000000000000000000000000000000000000000006020830152604082019050919050565b6000601d82527f5269646572206973206e6f742070617274206f662074686520726964650000006020830152604082019050919050565b6000601e82527f52696465206973206e6f7420696e20616e2041435449564520737461746500006020830152604082019050919050565b6000601682527f5269646520494420616c726561647920657869737473000000000000000000006020830152604082019050919050565b6000610140830160008301518482036000860152612945828261249a565b9150506020830151848203602086015261295f828261249a565b91505060408301518482036040860152612979828261249a565b91505060608301518482036060860152612993828261249a565b91505060808301516129a86080860182612b2f565b5060a08301516129bb60a0860182612b2f565b5060c083015184820360c08601526129d3828261249a565b91505060e083015184820360e08601526129ed828261249a565b915050610100830151848203610100860152612a09828261249a565b915050610120830151612a20610120860182612446565b508091505092915050565b6000610140830160008301518482036000860152612a49828261249a565b91505060208301518482036020860152612a63828261249a565b91505060408301518482036040860152612a7d828261249a565b91505060608301518482036060860152612a97828261249a565b9150506080830151612aac6080860182612b2f565b5060a0830151612abf60a0860182612b2f565b5060c083015184820360c0860152612ad7828261249a565b91505060e083015184820360e0860152612af1828261249a565b915050610100830151848203610100860152612b0d828261249a565b915050610120830151612b24610120860182612446565b508091505092915050565b612b3881613082565b82525050565b6000602082019050612b536000830184612455565b92915050565b6000610120820190508181036000830152612b74818b612464565b90508181036020830152612b87816126ec565b90508181036040830152612b9b818a6124d0565b90508181036060830152612baf81896124d0565b90508181036080830152612bc381886124d0565b9050612bd260a0830187612b2f565b81810360c0830152612be481866124d0565b905081810360e0830152612bf881856124d0565b9050818103610100830152612c0d81846124d0565b90509998505050505050505050565b6000610120820190508181036000830152612c37818b612464565b90508181036020830152612c4a81612814565b90508181036040830152612c5e818a6124d0565b90508181036060830152612c7281896124d0565b90508181036080830152612c8681886124d0565b9050612c9560a0830187612b2f565b81810360c0830152612ca781866124d0565b905081810360e0830152612cbb81856124d0565b9050818103610100830152612cd081846124d0565b90509998505050505050505050565b6000610120820190508181036000830152612cfa818b612464565b90508181036020830152612d0d8161284b565b90508181036040830152612d21818a6124d0565b90508181036060830152612d3581896124d0565b90508181036080830152612d4981886124d0565b9050612d5860a0830187612b2f565b81810360c0830152612d6a81866124d0565b905081810360e0830152612d7e81856124d0565b9050818103610100830152612d9381846124d0565b90509998505050505050505050565b600060c0820190508181036000830152612dbc81896124d0565b90508181036020830152612dd081886124d0565b9050612ddf6040830187612446565b612dec6060830186612b2f565b612df96080830185612b2f565b612e0660a0830184612b2f565b979650505050505050565b60006020820190508181036000830152612e2a81612556565b9050919050565b60006020820190508181036000830152612e4a816125b3565b9050919050565b60006020820190508181036000830152612e6a81612610565b9050919050565b60006020820190508181036000830152612e8a81612647565b9050919050565b60006020820190508181036000830152612eaa8161267e565b9050919050565b60006020820190508181036000830152612eca816126b5565b9050919050565b60006020820190508181036000830152612eea81612723565b9050919050565b60006020820190508181036000830152612f0a8161275a565b9050919050565b60006020820190508181036000830152612f2a816127b7565b9050919050565b60006020820190508181036000830152612f4a81612882565b9050919050565b60006020820190508181036000830152612f6a816128b9565b9050919050565b60006020820190508181036000830152612f8a816128f0565b9050919050565b60006020820190508181036000830152612fab8184612a2b565b905092915050565b60006020820190508181036000830152612fcd8184612927565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715612ff857600080fd5b8060405250919050565b600067ffffffffffffffff82111561301957600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600060038210151561306457fe5b819050919050565b600060038210151561307a57fe5b819050919050565b6000819050919050565b600060038210151561309d57600080fd5b819050919050565b6000819050919050565b60006130ba82613056565b9050919050565b60006130cc8261306c565b9050919050565b82818337600083830152505050565b60005b838110156131005780820151818401526020810190506130e5565b8381111561310f576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820171ec28477528c4e97cc9afbe7f135b671e88f5d8032550d6b95d4860ea023a46c6578706572696d656e74616cf50037";

    private static String librariesLinkedBinary;

    public static final String FUNC_CREATERIDE = "createRide";

    public static final String FUNC_ACCEPTRIDEBYOWNER = "acceptRideByOwner";

    public static final String FUNC_UPDATERIDESTATUSBYDRIVER = "updateRideStatusByDriver";

    public static final String FUNC_CANCELRIDEBYRIDER = "cancelRideByRider";

    public static final String FUNC_GETRIDERSTATUS = "getRiderStatus";

    public static final String FUNC_GETRIDEDETAILS = "getRideDetails";

    public static final Event RIDECREATED_EVENT = new Event("RideCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
    ;

    public static final Event RIDEUPDATED_EVENT = new Event("RideUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SENDNOTIFICATIONEVENT_EVENT = new Event("SendNotificationEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected RideCreation(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RideCreation(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RideCreation(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RideCreation(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<RideCreatedEventResponse> getRideCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RIDECREATED_EVENT, transactionReceipt);
        ArrayList<RideCreatedEventResponse> responses = new ArrayList<RideCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RideCreatedEventResponse typedResponse = new RideCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rideDetails = (Struct0) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RideCreatedEventResponse getRideCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RIDECREATED_EVENT, log);
        RideCreatedEventResponse typedResponse = new RideCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.rideDetails = (Struct0) eventValues.getNonIndexedValues().get(0);
        return typedResponse;
    }

    public Flowable<RideCreatedEventResponse> rideCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRideCreatedEventFromLog(log));
    }

    public Flowable<RideCreatedEventResponse> rideCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RIDECREATED_EVENT));
        return rideCreatedEventFlowable(filter);
    }

    public static List<RideUpdatedEventResponse> getRideUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RIDEUPDATED_EVENT, transactionReceipt);
        ArrayList<RideUpdatedEventResponse> responses = new ArrayList<RideUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RideUpdatedEventResponse typedResponse = new RideUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.riderCount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RideUpdatedEventResponse getRideUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RIDEUPDATED_EVENT, log);
        RideUpdatedEventResponse typedResponse = new RideUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.riderCount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<RideUpdatedEventResponse> rideUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRideUpdatedEventFromLog(log));
    }

    public Flowable<RideUpdatedEventResponse> rideUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RIDEUPDATED_EVENT));
        return rideUpdatedEventFlowable(filter);
    }

    public static List<SendNotificationEventEventResponse> getSendNotificationEventEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SENDNOTIFICATIONEVENT_EVENT, transactionReceipt);
        ArrayList<SendNotificationEventEventResponse> responses = new ArrayList<SendNotificationEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SendNotificationEventEventResponse typedResponse = new SendNotificationEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.riderId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.source = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.destination = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.departureTime = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.departureDate = (String) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SendNotificationEventEventResponse getSendNotificationEventEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SENDNOTIFICATIONEVENT_EVENT, log);
        SendNotificationEventEventResponse typedResponse = new SendNotificationEventEventResponse();
        typedResponse.log = log;
        typedResponse.riderId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.status = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.source = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.destination = (String) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
        typedResponse.departureTime = (String) eventValues.getNonIndexedValues().get(7).getValue();
        typedResponse.departureDate = (String) eventValues.getNonIndexedValues().get(8).getValue();
        return typedResponse;
    }

    public Flowable<SendNotificationEventEventResponse> sendNotificationEventEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSendNotificationEventEventFromLog(log));
    }

    public Flowable<SendNotificationEventEventResponse> sendNotificationEventEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SENDNOTIFICATIONEVENT_EVENT));
        return sendNotificationEventEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createRide(String rideId, String ownerId,
            String source, String destination, BigInteger fare, BigInteger availableSeats,
            String vehicleNumber, String departureTime, String departureDate) {
        final Function function = new Function(
                FUNC_CREATERIDE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(ownerId), 
                new org.web3j.abi.datatypes.Utf8String(source), 
                new org.web3j.abi.datatypes.Utf8String(destination), 
                new org.web3j.abi.datatypes.generated.Uint256(fare), 
                new org.web3j.abi.datatypes.generated.Uint256(availableSeats), 
                new org.web3j.abi.datatypes.Utf8String(vehicleNumber), 
                new org.web3j.abi.datatypes.Utf8String(departureTime), 
                new org.web3j.abi.datatypes.Utf8String(departureDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptRideByOwner(String rideId, String ownerId,
            String riderId) {
        final Function function = new Function(
                FUNC_ACCEPTRIDEBYOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(ownerId), 
                new org.web3j.abi.datatypes.Utf8String(riderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRideStatusByDriver(String rideId,
            String ownerId, BigInteger status) {
        final Function function = new Function(
                FUNC_UPDATERIDESTATUSBYDRIVER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(ownerId), 
                new org.web3j.abi.datatypes.generated.Uint8(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelRideByRider(String rideId, String riderId) {
        final Function function = new Function(
                FUNC_CANCELRIDEBYRIDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(riderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getRiderStatus(String rideId, String riderId) {
        final Function function = new Function(FUNC_GETRIDERSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(riderId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Struct0> getRideDetails(String rideId) {
        final Function function = new Function(FUNC_GETRIDEDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeRemoteCallSingleValueReturn(function, Struct0.class);
    }

    @Deprecated
    public static RideCreation load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new RideCreation(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RideCreation load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RideCreation(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RideCreation load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new RideCreation(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RideCreation load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RideCreation(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RideCreation> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RideCreation.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<RideCreation> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RideCreation.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<RideCreation> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RideCreation.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<RideCreation> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RideCreation.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Struct0 extends DynamicStruct {
        public String rideId;

        public String ownerId;

        public String source;

        public String destination;

        public BigInteger fare;

        public BigInteger availableSeats;

        public String vehicleNumber;

        public String departureTime;

        public String departureDate;

        public BigInteger status;

        public Struct0(String rideId, String ownerId, String source, String destination,
                BigInteger fare, BigInteger availableSeats, String vehicleNumber,
                String departureTime, String departureDate, BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(rideId), 
                    new org.web3j.abi.datatypes.Utf8String(ownerId), 
                    new org.web3j.abi.datatypes.Utf8String(source), 
                    new org.web3j.abi.datatypes.Utf8String(destination), 
                    new org.web3j.abi.datatypes.generated.Uint256(fare), 
                    new org.web3j.abi.datatypes.generated.Uint256(availableSeats), 
                    new org.web3j.abi.datatypes.Utf8String(vehicleNumber), 
                    new org.web3j.abi.datatypes.Utf8String(departureTime), 
                    new org.web3j.abi.datatypes.Utf8String(departureDate), 
                    new org.web3j.abi.datatypes.generated.Uint8(status));
            this.rideId = rideId;
            this.ownerId = ownerId;
            this.source = source;
            this.destination = destination;
            this.fare = fare;
            this.availableSeats = availableSeats;
            this.vehicleNumber = vehicleNumber;
            this.departureTime = departureTime;
            this.departureDate = departureDate;
            this.status = status;
        }

        public Struct0(Utf8String rideId, Utf8String ownerId, Utf8String source,
                Utf8String destination, Uint256 fare, Uint256 availableSeats,
                Utf8String vehicleNumber, Utf8String departureTime, Utf8String departureDate,
                Uint8 status) {
            super(rideId, ownerId, source, destination, fare, availableSeats, vehicleNumber, departureTime, departureDate, status);
            this.rideId = rideId.getValue();
            this.ownerId = ownerId.getValue();
            this.source = source.getValue();
            this.destination = destination.getValue();
            this.fare = fare.getValue();
            this.availableSeats = availableSeats.getValue();
            this.vehicleNumber = vehicleNumber.getValue();
            this.departureTime = departureTime.getValue();
            this.departureDate = departureDate.getValue();
            this.status = status.getValue();
        }
    }

    public static class RideCreatedEventResponse extends BaseEventResponse {
        public Struct0 rideDetails;
    }

    public static class RideUpdatedEventResponse extends BaseEventResponse {
        public String rideId;

        public String ownerId;

        public BigInteger status;

        public BigInteger availableSeats;

        public BigInteger updatedAt;

        public BigInteger riderCount;
    }

    public static class SendNotificationEventEventResponse extends BaseEventResponse {
        public String riderId;

        public String status;

        public String ownerId;

        public String source;

        public String destination;

        public BigInteger fare;

        public String vehicleNumber;

        public String departureTime;

        public String departureDate;
    }
}
