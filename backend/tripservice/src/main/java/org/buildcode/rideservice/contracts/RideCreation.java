package org.buildcode.rideservice.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class RideCreation extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50612700806100206000396000f3fe608060405260043610610067576000357c01000000000000000000000000000000000000000000000000000000009004806312ddb75d1461006c5780632b494412146100a957806349748249146100d25780638f91f9b6146100fb578063a471a91b14610124575b600080fd5b34801561007857600080fd5b50610093600480360361008e91908101906119be565b61014d565b6040516100a09190612110565b60405180910390f35b3480156100b557600080fd5b506100d060048036036100cb9190810190611a2a565b6103a6565b005b3480156100de57600080fd5b506100f960048036036100f49190810190611aa9565b610bb7565b005b34801561010757600080fd5b50610122600480360361011d9190810190611b40565b61115b565b005b34801561013057600080fd5b5061014b600480360361014691908101906119be565b611411565b005b600080836040516020018082805190602001908083835b6020831015156101895780518252602082019150602081019050602083039250610164565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000806000838152602001908152602001600020600001805460018160011615610100020316600290049050111515610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b90612440565b60405180910390fd5b6000806000838152602001908152602001600020600801846040518082805190602001908083835b602083101515610281578051825260208201915060208101905060208303925061025c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000180546001816001161561010002031660029004905011151561030e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610305906124a0565b60405180910390fd5b600080828152602001908152602001600020600801836040518082805190602001908083835b6020831015156103595780518252602082019150602081019050602083039250610334565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff1691505092915050565b6000836040516020018082805190602001908083835b6020831015156103e157805182526020820191506020810190506020830392506103bc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008060008381526020019081526020016000209050600081600001805460018160011615610100020316600290049050111515610491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048890612440565b60405180910390fd5b836040516020018082805190602001908083835b6020831015156104ca57805182526020820191506020810190506020830392506104a5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001208160010160405160200180828054600181600116156101000203166002900480156105675780601f10610545576101008083540402835291820191610567565b820191906000526020600020905b815481529060010190602001808311610553575b5050915050604051602081830303815290604052805190602001201415156105c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bb90612400565b60405180910390fd5b600060028111156105d157fe5b8160070160009054906101000a900460ff1660028111156105ee57fe5b141515610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790612540565b60405180910390fd5b60028081111561063c57fe5b83600281111561064857fe5b141561084f5760028160070160006101000a81548160ff0219169083600281111561066f57fe5b021790555060008090505b8160090180549050811015610849576060826009018281548110151561069c57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561073a5780601f1061070f5761010080835404028352916020019161073a565b820191906000526020600020905b81548152906001019060200180831161071d57829003601f168201915b505050505090506000600281111561074e57fe5b83600801826040518082805190602001908083835b6020831015156107885780518252602082019150602081019050602083039250610763565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff1660028111156107d757fe5b141561083b577f08325673e1013395919ee349aa96f8a7362a808b6d36bda8df997e5e1544341681846001018560020160000186600201600101876002016002015488600201600401604051610832969594939291906122fa565b60405180910390a15b50808060010191505061067a565b50610b3d565b6001600281111561085c57fe5b83600281111561086857fe5b1415610b015760018160070160006101000a81548160ff0219169083600281111561088f57fe5b021790555060008090505b8160090180549050811015610afb57606082600901828154811015156108bc57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561095a5780601f1061092f5761010080835404028352916020019161095a565b820191906000526020600020905b81548152906001019060200180831161093d57829003601f168201915b505050505090506000600281111561096e57fe5b83600801826040518082805190602001908083835b6020831015156109a85780518252602082019150602081019050602083039250610983565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff1660028111156109f757fe5b1415610aed57600183600801826040518082805190602001908083835b602083101515610a395780518252602082019150602081019050602083039250610a14565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548160ff02191690836002811115610a8a57fe5b02179055507f08325673e1013395919ee349aa96f8a7362a808b6d36bda8df997e5e1544341681846001018560020160000186600201600101876002016002015488600201600401604051610ae4969594939291906121cc565b60405180910390a15b50808060010191505061089a565b50610b3c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3390612460565b60405180910390fd5b5b4281600b01819055507ff84eb048d4788cc3304648927fa612a18f240efcd4d3910d0219c512d2bfb9c681600001826001018360070160009054906101000a900460ff16846002016003015485600b01548660090180549050604051610ba896959493929190612391565b60405180910390a15050505050565b6000836040516020018082805190602001908083835b602083101515610bf25780518252602082019150602081019050602083039250610bcd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008060008381526020019081526020016000209050600081600001805460018160011615610100020316600290049050111515610ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9990612440565b60405180910390fd5b836040516020018082805190602001908083835b602083101515610cdb5780518252602082019150602081019050602083039250610cb6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120816001016040516020018082805460018160011615610100020316600290048015610d785780601f10610d56576101008083540402835291820191610d78565b820191906000526020600020905b815481529060010190602001808311610d64575b505091505060405160208183030381529060405280519060200120141515610dd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcc90612500565b60405180910390fd5b60006002811115610de257fe5b8160070160009054906101000a900460ff166002811115610dff57fe5b141515610e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3890612420565b60405180910390fd5b60008160020160030154111515610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e84906124c0565b60405180910390fd5b600081600801846040518082805190602001908083835b602083101515610ec95780518252602082019150602081019050602083039250610ea4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805460018160011615610100020316600290049050141515610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d906124e0565b60405180910390fd5b604080519081016040528084815260200160006002811115610f7457fe5b81525081600801846040518082805190602001908083835b602083101515610fb15780518252602082019150602081019050602083039250610f8c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600082015181600001908051906020019061100092919061181b565b5060208201518160010160006101000a81548160ff0219169083600281111561102557fe5b02179055509050508060090183908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061106c92919061189b565b5050600181600201600301600082825403925050819055504281600b01819055507ff84eb048d4788cc3304648927fa612a18f240efcd4d3910d0219c512d2bfb9c681600001826001018360070160009054906101000a900460ff16846002016003015485600b015486600901805490506040516110ef96959493929190612391565b60405180910390a17f08325673e1013395919ee349aa96f8a7362a808b6d36bda8df997e5e154434168382600101836002016000018460020160010185600201600201548660020160040160405161114c96959493929190612263565b60405180910390a15050505050565b6000876040516020018082805190602001908083835b6020831015156111965780518252602082019150602081019050602083039250611171565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000806000838152602001908152602001600020600001805460018160011615610100020316600290049050141515611241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123890612560565b60405180910390fd5b87600080838152602001908152602001600020600001908051906020019061126a92919061189b565b5086600080838152602001908152602001600020600101908051906020019061129492919061189b565b508560008083815260200190815260200160002060020160000190805190602001906112c192919061189b565b508460008083815260200190815260200160002060020160010190805190602001906112ee92919061189b565b508360008083815260200190815260200160002060020160020181905550826000808381526020019081526020016000206002016003018190555081600080838152602001908152602001600020600201600401908051906020019061135592919061189b565b50600080600083815260200190815260200160002060070160006101000a81548160ff0219169083600281111561138857fe5b021790555042600080838152602001908152602001600020600a018190555042600080838152602001908152602001600020600b01819055507f567689d248ce69508d52172770e8496be13dc1f1b7c0a587a04e8685117439778888888888888860006040516113ff98979695949392919061212b565b60405180910390a15050505050505050565b6000826040516020018082805190602001908083835b60208310151561144c5780518252602082019150602081019050602083039250611427565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050600080600083815260200190815260200160002090506000816000018054600181600116156101000203166002900490501115156114fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f390612440565b60405180910390fd5b600081600801846040518082805190602001908083835b6020831015156115385780518252602082019150602081019050602083039250611513565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900490501115156115c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bc90612520565b60405180910390fd5b600060028111156115d257fe5b81600801846040518082805190602001908083835b60208310151561160c57805182526020820191506020810190506020830392506115e7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900460ff16600281111561165b57fe5b14151561169d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169490612480565b60405180910390fd5b600281600801846040518082805190602001908083835b6020831015156116d957805182526020820191506020810190506020830392506116b4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548160ff0219169083600281111561172a57fe5b0217905550600181600201600301600082825401925050819055504281600b01819055507ff84eb048d4788cc3304648927fa612a18f240efcd4d3910d0219c512d2bfb9c681600001826001018360070160009054906101000a900460ff16846002016003015485600b015486600901805490506040516117b096959493929190612391565b60405180910390a17f08325673e1013395919ee349aa96f8a7362a808b6d36bda8df997e5e154434168382600101836002016000018460020160010185600201600201548660020160040160405161180d969594939291906122fa565b60405180910390a150505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061185c57805160ff191683800117855561188a565b8280016001018555821561188a579182015b8281111561188957825182559160200191906001019061186e565b5b509050611897919061191b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106118dc57805160ff191683800117855561190a565b8280016001018555821561190a579182015b828111156119095782518255916020019190600101906118ee565b5b509050611917919061191b565b5090565b61193d91905b80821115611939576000816000905550600101611921565b5090565b90565b600061194c823561262c565b905092915050565b600082601f830112151561196757600080fd5b813561197a611975826125ad565b612580565b9150808252602083016020830185838301111561199657600080fd5b6119a1838284612673565b50505092915050565b60006119b68235612645565b905092915050565b600080604083850312156119d157600080fd5b600083013567ffffffffffffffff8111156119eb57600080fd5b6119f785828601611954565b925050602083013567ffffffffffffffff811115611a1457600080fd5b611a2085828601611954565b9150509250929050565b600080600060608486031215611a3f57600080fd5b600084013567ffffffffffffffff811115611a5957600080fd5b611a6586828701611954565b935050602084013567ffffffffffffffff811115611a8257600080fd5b611a8e86828701611954565b9250506040611a9f86828701611940565b9150509250925092565b600080600060608486031215611abe57600080fd5b600084013567ffffffffffffffff811115611ad857600080fd5b611ae486828701611954565b935050602084013567ffffffffffffffff811115611b0157600080fd5b611b0d86828701611954565b925050604084013567ffffffffffffffff811115611b2a57600080fd5b611b3686828701611954565b9150509250925092565b600080600080600080600060e0888a031215611b5b57600080fd5b600088013567ffffffffffffffff811115611b7557600080fd5b611b818a828b01611954565b975050602088013567ffffffffffffffff811115611b9e57600080fd5b611baa8a828b01611954565b965050604088013567ffffffffffffffff811115611bc757600080fd5b611bd38a828b01611954565b955050606088013567ffffffffffffffff811115611bf057600080fd5b611bfc8a828b01611954565b9450506080611c0d8a828b016119aa565b93505060a0611c1e8a828b016119aa565b92505060c088013567ffffffffffffffff811115611c3b57600080fd5b611c478a828b01611954565b91505092959891949750929550565b611c5f8161264f565b82525050565b611c6e81612661565b82525050565b6000611c7f826125eb565b808452611c93816020860160208601612682565b611c9c816126b5565b602085010191505092915050565b600081546001811660008114611cc75760018114611ce757611d28565b607f600283041680865260ff198316602087015260408601935050611d28565b60028204808652602086019550611cfd856125d9565b60005b82811015611d1f57815481890152600182019150602081019050611d00565b80880195505050505b505092915050565b6000603782527f556e617574686f72697a65643a204f6e6c79207468652072696465206f776e6560208301527f722063616e2075706461746520746865207374617475730000000000000000006040830152606082019050919050565b6000602b82527f52696465206973206e6f742041435449564520616e642063616e6e6f7420616360208301527f63657074207269646572730000000000000000000000000000000000000000006040830152606082019050919050565b6000601382527f5269646520646f6573206e6f74206578697374000000000000000000000000006020830152604082019050919050565b6000601282527f496e76616c6964205269646553746174757300000000000000000000000000006020830152604082019050919050565b6000601f82527f5269646572206973206e6f7420696e20616e20414354495645207374617465006020830152604082019050919050565b6000601482527f526964657220646f6573206e6f742065786973740000000000000000000000006020830152604082019050919050565b6000600982527f636f6d706c6574656400000000000000000000000000000000000000000000006020830152604082019050919050565b6000601282527f4e6f20617661696c61626c6520736561747300000000000000000000000000006020830152604082019050919050565b6000602182527f526964657220697320616c72656164792070617274206f66207468652072696460208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000603482527f556e617574686f72697a65643a204f6e6c79207468652072696465206f776e6560208301527f722063616e2061636365707420612072696465720000000000000000000000006040830152606082019050919050565b6000600682527f61637469766500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f63616e63656c6c656400000000000000000000000000000000000000000000006020830152604082019050919050565b6000601d82527f5269646572206973206e6f742070617274206f662074686520726964650000006020830152604082019050919050565b6000601e82527f52696465206973206e6f7420696e20616e2041435449564520737461746500006020830152604082019050919050565b6000601682527f5269646520494420616c726561647920657869737473000000000000000000006020830152604082019050919050565b61210a81612622565b82525050565b60006020820190506121256000830184611c65565b92915050565b6000610100820190508181036000830152612146818b611c74565b9050818103602083015261215a818a611c74565b9050818103604083015261216e8189611c74565b905081810360608301526121828188611c74565b90506121916080830187612101565b61219e60a0830186612101565b81810360c08301526121b08185611c74565b90506121bf60e0830184611c56565b9998505050505050505050565b600060e08201905081810360008301526121e68189611c74565b905081810360208301526121f981611ec6565b9050818103604083015261220d8188611caa565b905081810360608301526122218187611caa565b905081810360808301526122358186611caa565b905061224460a0830185612101565b81810360c08301526122568184611caa565b9050979650505050505050565b600060e082019050818103600083015261227d8189611c74565b9050818103602083015261229081611fee565b905081810360408301526122a48188611caa565b905081810360608301526122b88187611caa565b905081810360808301526122cc8186611caa565b90506122db60a0830185612101565b81810360c08301526122ed8184611caa565b9050979650505050505050565b600060e08201905081810360008301526123148189611c74565b9050818103602083015261232781612025565b9050818103604083015261233b8188611caa565b9050818103606083015261234f8187611caa565b905081810360808301526123638186611caa565b905061237260a0830185612101565b81810360c08301526123848184611caa565b9050979650505050505050565b600060c08201905081810360008301526123ab8189611caa565b905081810360208301526123bf8188611caa565b90506123ce6040830187611c56565b6123db6060830186612101565b6123e86080830185612101565b6123f560a0830184612101565b979650505050505050565b6000602082019050818103600083015261241981611d30565b9050919050565b6000602082019050818103600083015261243981611d8d565b9050919050565b6000602082019050818103600083015261245981611dea565b9050919050565b6000602082019050818103600083015261247981611e21565b9050919050565b6000602082019050818103600083015261249981611e58565b9050919050565b600060208201905081810360008301526124b981611e8f565b9050919050565b600060208201905081810360008301526124d981611efd565b9050919050565b600060208201905081810360008301526124f981611f34565b9050919050565b6000602082019050818103600083015261251981611f91565b9050919050565b600060208201905081810360008301526125398161205c565b9050919050565b6000602082019050818103600083015261255981612093565b9050919050565b60006020820190508181036000830152612579816120ca565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156125a357600080fd5b8060405250919050565b600067ffffffffffffffff8211156125c457600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600060038210151561260457fe5b819050919050565b600060038210151561261a57fe5b819050919050565b6000819050919050565b600060038210151561263d57600080fd5b819050919050565b6000819050919050565b600061265a826125f6565b9050919050565b600061266c8261260c565b9050919050565b82818337600083830152505050565b60005b838110156126a0578082015181840152602081019050612685565b838111156126af576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058201c6048459c097e4a81abe815f5d722a3da1c7c32b2163d80b296bbfb352587e96c6578706572696d656e74616cf50037";

    private static String librariesLinkedBinary;

    public static final String FUNC_CREATERIDE = "createRide";

    public static final String FUNC_ACCEPTRIDEBYOWNER = "acceptRideByOwner";

    public static final String FUNC_UPDATERIDESTATUSBYDRIVER = "updateRideStatusByDriver";

    public static final String FUNC_CANCELRIDEBYRIDER = "cancelRideByRider";

    public static final String FUNC_GETRIDERSTATUS = "getRiderStatus";

    public static final Event RIDECREATED_EVENT = new Event("RideCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event RIDEUPDATED_EVENT = new Event("RideUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SENDNOTIFICATIONEVENT_EVENT = new Event("SendNotificationEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected RideCreation(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RideCreation(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RideCreation(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RideCreation(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<RideCreatedEventResponse> getRideCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RIDECREATED_EVENT, transactionReceipt);
        ArrayList<RideCreatedEventResponse> responses = new ArrayList<RideCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RideCreatedEventResponse typedResponse = new RideCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.source = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.destination = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RideCreatedEventResponse getRideCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RIDECREATED_EVENT, log);
        RideCreatedEventResponse typedResponse = new RideCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.source = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.destination = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
        return typedResponse;
    }

    public Flowable<RideCreatedEventResponse> rideCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRideCreatedEventFromLog(log));
    }

    public Flowable<RideCreatedEventResponse> rideCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RIDECREATED_EVENT));
        return rideCreatedEventFlowable(filter);
    }

    public static List<RideUpdatedEventResponse> getRideUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RIDEUPDATED_EVENT, transactionReceipt);
        ArrayList<RideUpdatedEventResponse> responses = new ArrayList<RideUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RideUpdatedEventResponse typedResponse = new RideUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.riderCount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RideUpdatedEventResponse getRideUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RIDEUPDATED_EVENT, log);
        RideUpdatedEventResponse typedResponse = new RideUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.riderCount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<RideUpdatedEventResponse> rideUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRideUpdatedEventFromLog(log));
    }

    public Flowable<RideUpdatedEventResponse> rideUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RIDEUPDATED_EVENT));
        return rideUpdatedEventFlowable(filter);
    }

    public static List<SendNotificationEventEventResponse> getSendNotificationEventEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SENDNOTIFICATIONEVENT_EVENT, transactionReceipt);
        ArrayList<SendNotificationEventEventResponse> responses = new ArrayList<SendNotificationEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SendNotificationEventEventResponse typedResponse = new SendNotificationEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.riderId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.source = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.destination = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SendNotificationEventEventResponse getSendNotificationEventEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SENDNOTIFICATIONEVENT_EVENT, log);
        SendNotificationEventEventResponse typedResponse = new SendNotificationEventEventResponse();
        typedResponse.log = log;
        typedResponse.riderId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.status = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.source = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.destination = (String) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
        return typedResponse;
    }

    public Flowable<SendNotificationEventEventResponse> sendNotificationEventEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSendNotificationEventEventFromLog(log));
    }

    public Flowable<SendNotificationEventEventResponse> sendNotificationEventEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SENDNOTIFICATIONEVENT_EVENT));
        return sendNotificationEventEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createRide(String rideId, String ownerId,
            String source, String destination, BigInteger fare, BigInteger availableSeats,
            String vehicleNumber) {
        final Function function = new Function(
                FUNC_CREATERIDE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(ownerId), 
                new org.web3j.abi.datatypes.Utf8String(source), 
                new org.web3j.abi.datatypes.Utf8String(destination), 
                new org.web3j.abi.datatypes.generated.Uint256(fare), 
                new org.web3j.abi.datatypes.generated.Uint256(availableSeats), 
                new org.web3j.abi.datatypes.Utf8String(vehicleNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptRideByOwner(String rideId, String ownerId,
            String riderId) {
        final Function function = new Function(
                FUNC_ACCEPTRIDEBYOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(ownerId), 
                new org.web3j.abi.datatypes.Utf8String(riderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRideStatusByDriver(String rideId,
            String ownerId, BigInteger status) {
        final Function function = new Function(
                FUNC_UPDATERIDESTATUSBYDRIVER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(ownerId), 
                new org.web3j.abi.datatypes.generated.Uint8(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelRideByRider(String rideId, String riderId) {
        final Function function = new Function(
                FUNC_CANCELRIDEBYRIDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(riderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getRiderStatus(String rideId, String riderId) {
        final Function function = new Function(FUNC_GETRIDERSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId), 
                new org.web3j.abi.datatypes.Utf8String(riderId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static RideCreation load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new RideCreation(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RideCreation load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RideCreation(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RideCreation load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new RideCreation(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RideCreation load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RideCreation(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RideCreation> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RideCreation.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<RideCreation> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RideCreation.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<RideCreation> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RideCreation.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<RideCreation> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RideCreation.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class RideCreatedEventResponse extends BaseEventResponse {
        public String rideId;

        public String ownerId;

        public String source;

        public String destination;

        public BigInteger fare;

        public BigInteger availableSeats;

        public String vehicleNumber;

        public BigInteger status;
    }

    public static class RideUpdatedEventResponse extends BaseEventResponse {
        public String rideId;

        public String ownerId;

        public BigInteger status;

        public BigInteger availableSeats;

        public BigInteger updatedAt;

        public BigInteger riderCount;
    }

    public static class SendNotificationEventEventResponse extends BaseEventResponse {
        public String riderId;

        public String status;

        public String ownerId;

        public String source;

        public String destination;

        public BigInteger fare;

        public String vehicleNumber;
    }
}
