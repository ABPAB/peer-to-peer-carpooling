package org.buildcode.rideservice.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class RideCreation extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_CREATERIDE = "createRide";

    public static final String FUNC_ACCEPTRIDEBYOWNER = "acceptRideByOwner";

    public static final String FUNC_UPDATERIDESTATUSBYDRIVER = "updateRideStatusByDriver";

    public static final String FUNC_CANCELRIDEBYRIDER = "cancelRideByRider";

    public static final String FUNC_GETRIDERSTATUS = "getRiderStatus";

    public static final String FUNC_GETRIDEDETAILS = "getRideDetails";

    public static final Event RIDECREATED_EVENT = new Event("RideCreated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event RIDEUPDATED_EVENT = new Event("RideUpdated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SENDNOTIFICATIONEVENT_EVENT = new Event("SendNotificationEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected RideCreation(String contractAddress, Web3j web3j, Credentials credentials,
                           BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RideCreation(String contractAddress, Web3j web3j, Credentials credentials,
                           ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RideCreation(String contractAddress, Web3j web3j,
                           TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RideCreation(String contractAddress, Web3j web3j,
                           TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<RideCreatedEventResponse> getRideCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RIDECREATED_EVENT, transactionReceipt);
        ArrayList<RideCreatedEventResponse> responses = new ArrayList<RideCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RideCreatedEventResponse typedResponse = new RideCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.source = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.destination = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.departureTime = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.departureDate = (String) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RideCreatedEventResponse getRideCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RIDECREATED_EVENT, log);
        RideCreatedEventResponse typedResponse = new RideCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.source = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.destination = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
        typedResponse.departureTime = (String) eventValues.getNonIndexedValues().get(7).getValue();
        typedResponse.departureDate = (String) eventValues.getNonIndexedValues().get(8).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
        return typedResponse;
    }

    public Flowable<RideCreatedEventResponse> rideCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRideCreatedEventFromLog(log));
    }

    public Flowable<RideCreatedEventResponse> rideCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RIDECREATED_EVENT));
        return rideCreatedEventFlowable(filter);
    }

    public static List<RideUpdatedEventResponse> getRideUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(RIDEUPDATED_EVENT, transactionReceipt);
        ArrayList<RideUpdatedEventResponse> responses = new ArrayList<RideUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RideUpdatedEventResponse typedResponse = new RideUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.riderCount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RideUpdatedEventResponse getRideUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RIDEUPDATED_EVENT, log);
        RideUpdatedEventResponse typedResponse = new RideUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.rideId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.availableSeats = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.riderCount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<RideUpdatedEventResponse> rideUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRideUpdatedEventFromLog(log));
    }

    public Flowable<RideUpdatedEventResponse> rideUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RIDEUPDATED_EVENT));
        return rideUpdatedEventFlowable(filter);
    }

    public static List<SendNotificationEventEventResponse> getSendNotificationEventEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SENDNOTIFICATIONEVENT_EVENT, transactionReceipt);
        ArrayList<SendNotificationEventEventResponse> responses = new ArrayList<SendNotificationEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SendNotificationEventEventResponse typedResponse = new SendNotificationEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.riderId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.source = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.destination = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.departureTime = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.departureDate = (String) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SendNotificationEventEventResponse getSendNotificationEventEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SENDNOTIFICATIONEVENT_EVENT, log);
        SendNotificationEventEventResponse typedResponse = new SendNotificationEventEventResponse();
        typedResponse.log = log;
        typedResponse.riderId = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.status = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.ownerId = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.source = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.destination = (String) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.fare = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.vehicleNumber = (String) eventValues.getNonIndexedValues().get(6).getValue();
        typedResponse.departureTime = (String) eventValues.getNonIndexedValues().get(7).getValue();
        typedResponse.departureDate = (String) eventValues.getNonIndexedValues().get(8).getValue();
        return typedResponse;
    }

    public Flowable<SendNotificationEventEventResponse> sendNotificationEventEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSendNotificationEventEventFromLog(log));
    }

    public Flowable<SendNotificationEventEventResponse> sendNotificationEventEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SENDNOTIFICATIONEVENT_EVENT));
        return sendNotificationEventEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createRide(String rideId, String ownerId,
                                                             String source, String destination, BigInteger fare, BigInteger availableSeats,
                                                             String vehicleNumber, String departureTime, String departureDate) {
        final Function function = new Function(
                FUNC_CREATERIDE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId),
                        new org.web3j.abi.datatypes.Utf8String(ownerId),
                        new org.web3j.abi.datatypes.Utf8String(source),
                        new org.web3j.abi.datatypes.Utf8String(destination),
                        new org.web3j.abi.datatypes.generated.Uint256(fare),
                        new org.web3j.abi.datatypes.generated.Uint256(availableSeats),
                        new org.web3j.abi.datatypes.Utf8String(vehicleNumber),
                        new org.web3j.abi.datatypes.Utf8String(departureTime),
                        new org.web3j.abi.datatypes.Utf8String(departureDate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptRideByOwner(String rideId, String ownerId,
                                                                    String riderId) {
        final Function function = new Function(
                FUNC_ACCEPTRIDEBYOWNER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId),
                        new org.web3j.abi.datatypes.Utf8String(ownerId),
                        new org.web3j.abi.datatypes.Utf8String(riderId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRideStatusByDriver(String rideId,
                                                                           String ownerId, BigInteger status) {
        final Function function = new Function(
                FUNC_UPDATERIDESTATUSBYDRIVER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId),
                        new org.web3j.abi.datatypes.Utf8String(ownerId),
                        new org.web3j.abi.datatypes.generated.Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelRideByRider(String rideId, String riderId) {
        final Function function = new Function(
                FUNC_CANCELRIDEBYRIDER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId),
                        new org.web3j.abi.datatypes.Utf8String(riderId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getRiderStatus(String rideId, String riderId) {
        final Function function = new Function(FUNC_GETRIDERSTATUS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId),
                        new org.web3j.abi.datatypes.Utf8String(riderId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple10<String, String, String, String, BigInteger, BigInteger, String, String, String, BigInteger>> getRideDetails(
            String rideId) {
        final Function function = new Function(FUNC_GETRIDEDETAILS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(rideId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple10<String, String, String, String, BigInteger, BigInteger, String, String, String, BigInteger>>(function,
                new Callable<Tuple10<String, String, String, String, BigInteger, BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple10<String, String, String, String, BigInteger, BigInteger, String, String, String, BigInteger> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<String, String, String, String, BigInteger, BigInteger, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (String) results.get(7).getValue(),
                                (String) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue());
                    }
                });
    }

    @Deprecated
    public static RideCreation load(String contractAddress, Web3j web3j, Credentials credentials,
                                    BigInteger gasPrice, BigInteger gasLimit) {
        return new RideCreation(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RideCreation load(String contractAddress, Web3j web3j,
                                    TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RideCreation(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RideCreation load(String contractAddress, Web3j web3j, Credentials credentials,
                                    ContractGasProvider contractGasProvider) {
        return new RideCreation(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RideCreation load(String contractAddress, Web3j web3j,
                                    TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RideCreation(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RideCreation> deploy(Web3j web3j, Credentials credentials,
                                                  ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RideCreation.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<RideCreation> deploy(Web3j web3j, Credentials credentials,
                                                  BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RideCreation.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<RideCreation> deploy(Web3j web3j,
                                                  TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RideCreation.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<RideCreation> deploy(Web3j web3j,
                                                  TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RideCreation.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class RideCreatedEventResponse extends BaseEventResponse {
        public String rideId;

        public String ownerId;

        public String source;

        public String destination;

        public BigInteger fare;

        public BigInteger availableSeats;

        public String vehicleNumber;

        public String departureTime;

        public String departureDate;

        public BigInteger status;
    }

    public static class RideUpdatedEventResponse extends BaseEventResponse {
        public String rideId;

        public String ownerId;

        public BigInteger status;

        public BigInteger availableSeats;

        public BigInteger updatedAt;

        public BigInteger riderCount;
    }

    public static class SendNotificationEventEventResponse extends BaseEventResponse {
        public String riderId;

        public String status;

        public String ownerId;

        public String source;

        public String destination;

        public BigInteger fare;

        public String vehicleNumber;

        public String departureTime;

        public String departureDate;
    }
}